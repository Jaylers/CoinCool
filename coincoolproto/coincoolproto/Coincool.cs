// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: coincool.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Traditionasia.Coincool.Proto {

  /// <summary>Holder for reflection information generated from coincool.proto</summary>
  public static partial class CoincoolReflection {

    #region Descriptor
    /// <summary>File descriptor for coincool.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CoincoolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5jb2luY29vbC5wcm90bxIgY29tLnRyYWRpdGlvbmFzaWEuY29pbmNvb2wu",
            "cHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxofZ29vZ2xl",
            "L3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byIdCg5DcnlwdG9SZXF1ZXN0UBIL",
            "CgNrZXkYASABKAkivwEKB0NyeXB0b1ASCgoCaWQYASABKAkSDAoEbGFzdBgC",
            "IAEoCRIRCglsb3dlc3RBc2sYAyABKAkSEgoKaGlnaGVzdEJpZBgEIAEoCRIV",
            "Cg1wZXJjZW50Q2hhbmdlGAUgASgJEhIKCmJhc2VWb2x1bWUYBiABKAkSEwoL",
            "cXVvdGVWb2x1bWUYByABKAkSEAoIaXNGcm96ZW4YCCABKAkSEAoIaGlnaDI0",
            "aHIYCSABKAkSDwoHbG93MjRochgKIAEoCSLuAQoLQ3J5cHRvSW5mb1ASCgoC",
            "aWQYASABKAkSCwoDa2V5GAIgASgJEg4KBmltZ1VybBgDIAEoCRIMCgRuYW1l",
            "GAQgASgJEgwKBGxhc3QYBSABKAkSEQoJbG93ZXN0QXNrGAYgASgJEhIKCmhp",
            "Z2hlc3RCaWQYByABKAkSFQoNcGVyY2VudENoYW5nZRgIIAEoCRISCgpiYXNl",
            "Vm9sdW1lGAkgASgJEhMKC3F1b3RlVm9sdW1lGAogASgJEhAKCGlzRnJvemVu",
            "GAsgASgJEhAKCGhpZ2gyNGhyGAwgASgJEg8KB2xvdzI0aHIYDSABKAki1QEK",
            "DVNvY2tldENyeXB0b1ASDgoGc3RyZWFtGAEgASgJEgoKAmlkGAIgASgJEgwK",
            "BGxhc3QYAyABKAkSEQoJbG93ZXN0QXNrGAQgASgJEhIKCmhpZ2hlc3RCaWQY",
            "BSABKAkSFQoNcGVyY2VudENoYW5nZRgGIAEoCRISCgpiYXNlVm9sdW1lGAcg",
            "ASgJEhMKC3F1b3RlVm9sdW1lGAggASgJEhAKCGlzRnJvemVuGAkgASgJEhAK",
            "CGhpZ2gyNGhyGAogASgJEg8KB2xvdzI0aHIYCyABKAlCAkgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Traditionasia.Coincool.Proto.CryptoRequestP), global::Com.Traditionasia.Coincool.Proto.CryptoRequestP.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Traditionasia.Coincool.Proto.CryptoP), global::Com.Traditionasia.Coincool.Proto.CryptoP.Parser, new[]{ "Id", "Last", "LowestAsk", "HighestBid", "PercentChange", "BaseVolume", "QuoteVolume", "IsFrozen", "High24Hr", "Low24Hr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Traditionasia.Coincool.Proto.CryptoInfoP), global::Com.Traditionasia.Coincool.Proto.CryptoInfoP.Parser, new[]{ "Id", "Key", "ImgUrl", "Name", "Last", "LowestAsk", "HighestBid", "PercentChange", "BaseVolume", "QuoteVolume", "IsFrozen", "High24Hr", "Low24Hr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Traditionasia.Coincool.Proto.SocketCryptoP), global::Com.Traditionasia.Coincool.Proto.SocketCryptoP.Parser, new[]{ "Stream", "Id", "Last", "LowestAsk", "HighestBid", "PercentChange", "BaseVolume", "QuoteVolume", "IsFrozen", "High24Hr", "Low24Hr" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CryptoRequestP : pb::IMessage<CryptoRequestP> {
    private static readonly pb::MessageParser<CryptoRequestP> _parser = new pb::MessageParser<CryptoRequestP>(() => new CryptoRequestP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CryptoRequestP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Traditionasia.Coincool.Proto.CoincoolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoRequestP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoRequestP(CryptoRequestP other) : this() {
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoRequestP Clone() {
      return new CryptoRequestP(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CryptoRequestP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CryptoRequestP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CryptoRequestP other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CryptoP : pb::IMessage<CryptoP> {
    private static readonly pb::MessageParser<CryptoP> _parser = new pb::MessageParser<CryptoP>(() => new CryptoP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CryptoP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Traditionasia.Coincool.Proto.CoincoolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoP(CryptoP other) : this() {
      id_ = other.id_;
      last_ = other.last_;
      lowestAsk_ = other.lowestAsk_;
      highestBid_ = other.highestBid_;
      percentChange_ = other.percentChange_;
      baseVolume_ = other.baseVolume_;
      quoteVolume_ = other.quoteVolume_;
      isFrozen_ = other.isFrozen_;
      high24Hr_ = other.high24Hr_;
      low24Hr_ = other.low24Hr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoP Clone() {
      return new CryptoP(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 2;
    private string last_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Last {
      get { return last_; }
      set {
        last_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lowestAsk" field.</summary>
    public const int LowestAskFieldNumber = 3;
    private string lowestAsk_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LowestAsk {
      get { return lowestAsk_; }
      set {
        lowestAsk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "highestBid" field.</summary>
    public const int HighestBidFieldNumber = 4;
    private string highestBid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HighestBid {
      get { return highestBid_; }
      set {
        highestBid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "percentChange" field.</summary>
    public const int PercentChangeFieldNumber = 5;
    private string percentChange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PercentChange {
      get { return percentChange_; }
      set {
        percentChange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseVolume" field.</summary>
    public const int BaseVolumeFieldNumber = 6;
    private string baseVolume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseVolume {
      get { return baseVolume_; }
      set {
        baseVolume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quoteVolume" field.</summary>
    public const int QuoteVolumeFieldNumber = 7;
    private string quoteVolume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuoteVolume {
      get { return quoteVolume_; }
      set {
        quoteVolume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isFrozen" field.</summary>
    public const int IsFrozenFieldNumber = 8;
    private string isFrozen_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IsFrozen {
      get { return isFrozen_; }
      set {
        isFrozen_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "high24hr" field.</summary>
    public const int High24HrFieldNumber = 9;
    private string high24Hr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string High24Hr {
      get { return high24Hr_; }
      set {
        high24Hr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "low24hr" field.</summary>
    public const int Low24HrFieldNumber = 10;
    private string low24Hr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Low24Hr {
      get { return low24Hr_; }
      set {
        low24Hr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CryptoP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CryptoP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Last != other.Last) return false;
      if (LowestAsk != other.LowestAsk) return false;
      if (HighestBid != other.HighestBid) return false;
      if (PercentChange != other.PercentChange) return false;
      if (BaseVolume != other.BaseVolume) return false;
      if (QuoteVolume != other.QuoteVolume) return false;
      if (IsFrozen != other.IsFrozen) return false;
      if (High24Hr != other.High24Hr) return false;
      if (Low24Hr != other.Low24Hr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Last.Length != 0) hash ^= Last.GetHashCode();
      if (LowestAsk.Length != 0) hash ^= LowestAsk.GetHashCode();
      if (HighestBid.Length != 0) hash ^= HighestBid.GetHashCode();
      if (PercentChange.Length != 0) hash ^= PercentChange.GetHashCode();
      if (BaseVolume.Length != 0) hash ^= BaseVolume.GetHashCode();
      if (QuoteVolume.Length != 0) hash ^= QuoteVolume.GetHashCode();
      if (IsFrozen.Length != 0) hash ^= IsFrozen.GetHashCode();
      if (High24Hr.Length != 0) hash ^= High24Hr.GetHashCode();
      if (Low24Hr.Length != 0) hash ^= Low24Hr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Last.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Last);
      }
      if (LowestAsk.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LowestAsk);
      }
      if (HighestBid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HighestBid);
      }
      if (PercentChange.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PercentChange);
      }
      if (BaseVolume.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BaseVolume);
      }
      if (QuoteVolume.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(QuoteVolume);
      }
      if (IsFrozen.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(IsFrozen);
      }
      if (High24Hr.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(High24Hr);
      }
      if (Low24Hr.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Low24Hr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Last.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Last);
      }
      if (LowestAsk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LowestAsk);
      }
      if (HighestBid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HighestBid);
      }
      if (PercentChange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PercentChange);
      }
      if (BaseVolume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseVolume);
      }
      if (QuoteVolume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuoteVolume);
      }
      if (IsFrozen.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IsFrozen);
      }
      if (High24Hr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(High24Hr);
      }
      if (Low24Hr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Low24Hr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CryptoP other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Last.Length != 0) {
        Last = other.Last;
      }
      if (other.LowestAsk.Length != 0) {
        LowestAsk = other.LowestAsk;
      }
      if (other.HighestBid.Length != 0) {
        HighestBid = other.HighestBid;
      }
      if (other.PercentChange.Length != 0) {
        PercentChange = other.PercentChange;
      }
      if (other.BaseVolume.Length != 0) {
        BaseVolume = other.BaseVolume;
      }
      if (other.QuoteVolume.Length != 0) {
        QuoteVolume = other.QuoteVolume;
      }
      if (other.IsFrozen.Length != 0) {
        IsFrozen = other.IsFrozen;
      }
      if (other.High24Hr.Length != 0) {
        High24Hr = other.High24Hr;
      }
      if (other.Low24Hr.Length != 0) {
        Low24Hr = other.Low24Hr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Last = input.ReadString();
            break;
          }
          case 26: {
            LowestAsk = input.ReadString();
            break;
          }
          case 34: {
            HighestBid = input.ReadString();
            break;
          }
          case 42: {
            PercentChange = input.ReadString();
            break;
          }
          case 50: {
            BaseVolume = input.ReadString();
            break;
          }
          case 58: {
            QuoteVolume = input.ReadString();
            break;
          }
          case 66: {
            IsFrozen = input.ReadString();
            break;
          }
          case 74: {
            High24Hr = input.ReadString();
            break;
          }
          case 82: {
            Low24Hr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CryptoInfoP : pb::IMessage<CryptoInfoP> {
    private static readonly pb::MessageParser<CryptoInfoP> _parser = new pb::MessageParser<CryptoInfoP>(() => new CryptoInfoP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CryptoInfoP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Traditionasia.Coincool.Proto.CoincoolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoInfoP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoInfoP(CryptoInfoP other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      imgUrl_ = other.imgUrl_;
      name_ = other.name_;
      last_ = other.last_;
      lowestAsk_ = other.lowestAsk_;
      highestBid_ = other.highestBid_;
      percentChange_ = other.percentChange_;
      baseVolume_ = other.baseVolume_;
      quoteVolume_ = other.quoteVolume_;
      isFrozen_ = other.isFrozen_;
      high24Hr_ = other.high24Hr_;
      low24Hr_ = other.low24Hr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoInfoP Clone() {
      return new CryptoInfoP(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imgUrl" field.</summary>
    public const int ImgUrlFieldNumber = 3;
    private string imgUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImgUrl {
      get { return imgUrl_; }
      set {
        imgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 5;
    private string last_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Last {
      get { return last_; }
      set {
        last_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lowestAsk" field.</summary>
    public const int LowestAskFieldNumber = 6;
    private string lowestAsk_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LowestAsk {
      get { return lowestAsk_; }
      set {
        lowestAsk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "highestBid" field.</summary>
    public const int HighestBidFieldNumber = 7;
    private string highestBid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HighestBid {
      get { return highestBid_; }
      set {
        highestBid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "percentChange" field.</summary>
    public const int PercentChangeFieldNumber = 8;
    private string percentChange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PercentChange {
      get { return percentChange_; }
      set {
        percentChange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseVolume" field.</summary>
    public const int BaseVolumeFieldNumber = 9;
    private string baseVolume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseVolume {
      get { return baseVolume_; }
      set {
        baseVolume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quoteVolume" field.</summary>
    public const int QuoteVolumeFieldNumber = 10;
    private string quoteVolume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuoteVolume {
      get { return quoteVolume_; }
      set {
        quoteVolume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isFrozen" field.</summary>
    public const int IsFrozenFieldNumber = 11;
    private string isFrozen_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IsFrozen {
      get { return isFrozen_; }
      set {
        isFrozen_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "high24hr" field.</summary>
    public const int High24HrFieldNumber = 12;
    private string high24Hr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string High24Hr {
      get { return high24Hr_; }
      set {
        high24Hr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "low24hr" field.</summary>
    public const int Low24HrFieldNumber = 13;
    private string low24Hr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Low24Hr {
      get { return low24Hr_; }
      set {
        low24Hr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CryptoInfoP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CryptoInfoP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Key != other.Key) return false;
      if (ImgUrl != other.ImgUrl) return false;
      if (Name != other.Name) return false;
      if (Last != other.Last) return false;
      if (LowestAsk != other.LowestAsk) return false;
      if (HighestBid != other.HighestBid) return false;
      if (PercentChange != other.PercentChange) return false;
      if (BaseVolume != other.BaseVolume) return false;
      if (QuoteVolume != other.QuoteVolume) return false;
      if (IsFrozen != other.IsFrozen) return false;
      if (High24Hr != other.High24Hr) return false;
      if (Low24Hr != other.Low24Hr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (ImgUrl.Length != 0) hash ^= ImgUrl.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Last.Length != 0) hash ^= Last.GetHashCode();
      if (LowestAsk.Length != 0) hash ^= LowestAsk.GetHashCode();
      if (HighestBid.Length != 0) hash ^= HighestBid.GetHashCode();
      if (PercentChange.Length != 0) hash ^= PercentChange.GetHashCode();
      if (BaseVolume.Length != 0) hash ^= BaseVolume.GetHashCode();
      if (QuoteVolume.Length != 0) hash ^= QuoteVolume.GetHashCode();
      if (IsFrozen.Length != 0) hash ^= IsFrozen.GetHashCode();
      if (High24Hr.Length != 0) hash ^= High24Hr.GetHashCode();
      if (Low24Hr.Length != 0) hash ^= Low24Hr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (ImgUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImgUrl);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Last.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Last);
      }
      if (LowestAsk.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LowestAsk);
      }
      if (HighestBid.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(HighestBid);
      }
      if (PercentChange.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PercentChange);
      }
      if (BaseVolume.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BaseVolume);
      }
      if (QuoteVolume.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(QuoteVolume);
      }
      if (IsFrozen.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IsFrozen);
      }
      if (High24Hr.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(High24Hr);
      }
      if (Low24Hr.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Low24Hr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (ImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImgUrl);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Last.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Last);
      }
      if (LowestAsk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LowestAsk);
      }
      if (HighestBid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HighestBid);
      }
      if (PercentChange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PercentChange);
      }
      if (BaseVolume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseVolume);
      }
      if (QuoteVolume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuoteVolume);
      }
      if (IsFrozen.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IsFrozen);
      }
      if (High24Hr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(High24Hr);
      }
      if (Low24Hr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Low24Hr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CryptoInfoP other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.ImgUrl.Length != 0) {
        ImgUrl = other.ImgUrl;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Last.Length != 0) {
        Last = other.Last;
      }
      if (other.LowestAsk.Length != 0) {
        LowestAsk = other.LowestAsk;
      }
      if (other.HighestBid.Length != 0) {
        HighestBid = other.HighestBid;
      }
      if (other.PercentChange.Length != 0) {
        PercentChange = other.PercentChange;
      }
      if (other.BaseVolume.Length != 0) {
        BaseVolume = other.BaseVolume;
      }
      if (other.QuoteVolume.Length != 0) {
        QuoteVolume = other.QuoteVolume;
      }
      if (other.IsFrozen.Length != 0) {
        IsFrozen = other.IsFrozen;
      }
      if (other.High24Hr.Length != 0) {
        High24Hr = other.High24Hr;
      }
      if (other.Low24Hr.Length != 0) {
        Low24Hr = other.Low24Hr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            ImgUrl = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Last = input.ReadString();
            break;
          }
          case 50: {
            LowestAsk = input.ReadString();
            break;
          }
          case 58: {
            HighestBid = input.ReadString();
            break;
          }
          case 66: {
            PercentChange = input.ReadString();
            break;
          }
          case 74: {
            BaseVolume = input.ReadString();
            break;
          }
          case 82: {
            QuoteVolume = input.ReadString();
            break;
          }
          case 90: {
            IsFrozen = input.ReadString();
            break;
          }
          case 98: {
            High24Hr = input.ReadString();
            break;
          }
          case 106: {
            Low24Hr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SocketCryptoP : pb::IMessage<SocketCryptoP> {
    private static readonly pb::MessageParser<SocketCryptoP> _parser = new pb::MessageParser<SocketCryptoP>(() => new SocketCryptoP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SocketCryptoP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Traditionasia.Coincool.Proto.CoincoolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketCryptoP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketCryptoP(SocketCryptoP other) : this() {
      stream_ = other.stream_;
      id_ = other.id_;
      last_ = other.last_;
      lowestAsk_ = other.lowestAsk_;
      highestBid_ = other.highestBid_;
      percentChange_ = other.percentChange_;
      baseVolume_ = other.baseVolume_;
      quoteVolume_ = other.quoteVolume_;
      isFrozen_ = other.isFrozen_;
      high24Hr_ = other.high24Hr_;
      low24Hr_ = other.low24Hr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketCryptoP Clone() {
      return new SocketCryptoP(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private string stream_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stream {
      get { return stream_; }
      set {
        stream_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 3;
    private string last_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Last {
      get { return last_; }
      set {
        last_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lowestAsk" field.</summary>
    public const int LowestAskFieldNumber = 4;
    private string lowestAsk_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LowestAsk {
      get { return lowestAsk_; }
      set {
        lowestAsk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "highestBid" field.</summary>
    public const int HighestBidFieldNumber = 5;
    private string highestBid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HighestBid {
      get { return highestBid_; }
      set {
        highestBid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "percentChange" field.</summary>
    public const int PercentChangeFieldNumber = 6;
    private string percentChange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PercentChange {
      get { return percentChange_; }
      set {
        percentChange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseVolume" field.</summary>
    public const int BaseVolumeFieldNumber = 7;
    private string baseVolume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseVolume {
      get { return baseVolume_; }
      set {
        baseVolume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quoteVolume" field.</summary>
    public const int QuoteVolumeFieldNumber = 8;
    private string quoteVolume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuoteVolume {
      get { return quoteVolume_; }
      set {
        quoteVolume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isFrozen" field.</summary>
    public const int IsFrozenFieldNumber = 9;
    private string isFrozen_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IsFrozen {
      get { return isFrozen_; }
      set {
        isFrozen_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "high24hr" field.</summary>
    public const int High24HrFieldNumber = 10;
    private string high24Hr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string High24Hr {
      get { return high24Hr_; }
      set {
        high24Hr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "low24hr" field.</summary>
    public const int Low24HrFieldNumber = 11;
    private string low24Hr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Low24Hr {
      get { return low24Hr_; }
      set {
        low24Hr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SocketCryptoP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SocketCryptoP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stream != other.Stream) return false;
      if (Id != other.Id) return false;
      if (Last != other.Last) return false;
      if (LowestAsk != other.LowestAsk) return false;
      if (HighestBid != other.HighestBid) return false;
      if (PercentChange != other.PercentChange) return false;
      if (BaseVolume != other.BaseVolume) return false;
      if (QuoteVolume != other.QuoteVolume) return false;
      if (IsFrozen != other.IsFrozen) return false;
      if (High24Hr != other.High24Hr) return false;
      if (Low24Hr != other.Low24Hr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stream.Length != 0) hash ^= Stream.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Last.Length != 0) hash ^= Last.GetHashCode();
      if (LowestAsk.Length != 0) hash ^= LowestAsk.GetHashCode();
      if (HighestBid.Length != 0) hash ^= HighestBid.GetHashCode();
      if (PercentChange.Length != 0) hash ^= PercentChange.GetHashCode();
      if (BaseVolume.Length != 0) hash ^= BaseVolume.GetHashCode();
      if (QuoteVolume.Length != 0) hash ^= QuoteVolume.GetHashCode();
      if (IsFrozen.Length != 0) hash ^= IsFrozen.GetHashCode();
      if (High24Hr.Length != 0) hash ^= High24Hr.GetHashCode();
      if (Low24Hr.Length != 0) hash ^= Low24Hr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stream.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Stream);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Last.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Last);
      }
      if (LowestAsk.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LowestAsk);
      }
      if (HighestBid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HighestBid);
      }
      if (PercentChange.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PercentChange);
      }
      if (BaseVolume.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BaseVolume);
      }
      if (QuoteVolume.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(QuoteVolume);
      }
      if (IsFrozen.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IsFrozen);
      }
      if (High24Hr.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(High24Hr);
      }
      if (Low24Hr.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Low24Hr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stream.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stream);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Last.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Last);
      }
      if (LowestAsk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LowestAsk);
      }
      if (HighestBid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HighestBid);
      }
      if (PercentChange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PercentChange);
      }
      if (BaseVolume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseVolume);
      }
      if (QuoteVolume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuoteVolume);
      }
      if (IsFrozen.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IsFrozen);
      }
      if (High24Hr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(High24Hr);
      }
      if (Low24Hr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Low24Hr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SocketCryptoP other) {
      if (other == null) {
        return;
      }
      if (other.Stream.Length != 0) {
        Stream = other.Stream;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Last.Length != 0) {
        Last = other.Last;
      }
      if (other.LowestAsk.Length != 0) {
        LowestAsk = other.LowestAsk;
      }
      if (other.HighestBid.Length != 0) {
        HighestBid = other.HighestBid;
      }
      if (other.PercentChange.Length != 0) {
        PercentChange = other.PercentChange;
      }
      if (other.BaseVolume.Length != 0) {
        BaseVolume = other.BaseVolume;
      }
      if (other.QuoteVolume.Length != 0) {
        QuoteVolume = other.QuoteVolume;
      }
      if (other.IsFrozen.Length != 0) {
        IsFrozen = other.IsFrozen;
      }
      if (other.High24Hr.Length != 0) {
        High24Hr = other.High24Hr;
      }
      if (other.Low24Hr.Length != 0) {
        Low24Hr = other.Low24Hr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Stream = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Last = input.ReadString();
            break;
          }
          case 34: {
            LowestAsk = input.ReadString();
            break;
          }
          case 42: {
            HighestBid = input.ReadString();
            break;
          }
          case 50: {
            PercentChange = input.ReadString();
            break;
          }
          case 58: {
            BaseVolume = input.ReadString();
            break;
          }
          case 66: {
            QuoteVolume = input.ReadString();
            break;
          }
          case 74: {
            IsFrozen = input.ReadString();
            break;
          }
          case 82: {
            High24Hr = input.ReadString();
            break;
          }
          case 90: {
            Low24Hr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
